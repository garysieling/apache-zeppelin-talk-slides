{
  "paragraphs": [
    {
      "text": "%sh\n\ncat gradcam.py",
      "user": "anonymous",
      "dateUpdated": "2019-08-21 01:52:21.076",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\nfrom __future__ import print_function\n\nimport mxnet as mx\nimport mxnet.ndarray as nd\n\nfrom mxnet import gluon\nfrom mxnet import autograd\nfrom mxnet.gluon import nn\n\nimport numpy as np\nimport cv2\n\nclass ReluOp(mx.operator.CustomOp):\n    \"\"\"Modified ReLU as described in section 3.4 in https://arxiv.org/abs/1412.6806.\n    This is used for guided backpropagation to get gradients of the image w.r.t activations.\n    This Operator will do a regular backpropagation if `guided_backprop` is set to False\n    and a guided packpropagation if `guided_backprop` is set to True. Check gradcam_demo.py\n    for an example usage.\"\"\"\n\n    guided_backprop \u003d False\n\n    def forward(self, is_train, req, in_data, out_data, aux):\n        x \u003d in_data[0]\n        y \u003d nd.maximum(x, nd.zeros_like(x))\n        self.assign(out_data[0], req[0], y)\n\n    def backward(self, req, out_grad, in_data, out_data, in_grad, aux):\n        if ReluOp.guided_backprop:\n            # Get output and gradients of output\n            y \u003d out_data[0]\n            dy \u003d out_grad[0]\n            # Zero out the negatives in the gradients of the output\n            dy_positives \u003d nd.maximum(dy, nd.zeros_like(dy))\n            # What output values were greater than 0?\n            y_ones \u003d y.__gt__(0)\n            # Mask out the values for which at least one of dy or y is negative\n            dx \u003d dy_positives * y_ones\n            self.assign(in_grad[0], req[0], dx)\n        else:\n            # Regular backward for ReLU\n            x \u003d in_data[0]\n            x_gt_zero \u003d x.__gt__(0)\n            dx \u003d out_grad[0] * x_gt_zero\n            self.assign(in_grad[0], req[0], dx)\n\ndef set_guided_backprop(mode\u003dTrue):\n    ReluOp.guided_backprop \u003d mode\n\n@mx.operator.register(\"relu\")\nclass ReluProp(mx.operator.CustomOpProp):\n    def __init__(self):\n        super(ReluProp, self).__init__(True)\n\n    def infer_shape(self, in_shapes):\n        data_shape \u003d in_shapes[0]\n        output_shape \u003d data_shape\n        return (data_shape,), (output_shape,), ()\n\n    def create_operator(self, ctx, in_shapes, in_dtypes):\n        return ReluOp()  \n\nclass Activation(mx.gluon.HybridBlock):\n    @staticmethod\n    def set_guided_backprop(mode\u003dFalse):\n        ReluOp.guided_backprop \u003d mode\n\n    def __init__(self, act_type, **kwargs):\n        assert act_type \u003d\u003d \u0027relu\u0027\n        super(Activation, self).__init__(**kwargs)\n\n    def hybrid_forward(self, F, x):\n        return F.Custom(x, op_type\u003d\u0027relu\u0027)\n\nclass Conv2D(mx.gluon.HybridBlock):\n    \"\"\"Wrapper on top of gluon.nn.Conv2D to capture the output and gradients of output of a Conv2D\n    layer in a network. Use `set_capture_layer_name` to select the layer\n    whose outputs and gradients of outputs need to be captured. After the backward pass,\n    `conv_output` will contain the output and `conv_output.grad` will contain the\n    output\u0027s gradients. Check gradcam_demo.py for example usage.\"\"\"\n\n    conv_output \u003d None\n    capture_layer_name \u003d None\n\n    def __init__(self, channels, kernel_size, strides\u003d(1, 1), padding\u003d(0, 0),\n                 dilation\u003d(1, 1), groups\u003d1, layout\u003d\u0027NCHW\u0027,\n                 activation\u003dNone, use_bias\u003dTrue, weight_initializer\u003dNone,\n                 bias_initializer\u003d\u0027zeros\u0027, in_channels\u003d0, **kwargs):\n        super(Conv2D, self).__init__(**kwargs)\n        self.conv \u003d nn.Conv2D(channels, kernel_size, strides\u003dstrides, padding\u003dpadding,\n                             dilation\u003ddilation, groups\u003dgroups, layout\u003dlayout,\n                             activation\u003dactivation, use_bias\u003duse_bias, weight_initializer\u003dweight_initializer,\n                             bias_initializer\u003dbias_initializer, in_channels\u003din_channels)\n\n    def hybrid_forward(self, F, x):\n        out \u003d self.conv(x)\n        name \u003d self._prefix[:-1]\n        if name \u003d\u003d Conv2D.capture_layer_name:\n            out.attach_grad()\n            Conv2D.conv_output \u003d out\n        return out\n\ndef set_capture_layer_name(name):\n    Conv2D.capture_layer_name \u003d name\n\ndef _get_grad(net, image, class_id\u003dNone, conv_layer_name\u003dNone, image_grad\u003dFalse):\n    \"\"\"This is an internal helper function that can be used for either of these\n    but not both at the same time:\n    1. Record the output and gradient of output of an intermediate convolutional layer.\n    2. Record the gradients of the image.\n\n    Parameters\n    ----------\n    image : NDArray\n        Image to visuaize. This is an NDArray with the preprocessed image.\n    class_id : int\n        Category ID this image belongs to. If not provided,\n        network\u0027s prediction will be used.\n    conv_layer_name: str\n        Name of the convolutional layer whose output and output\u0027s gradients need to be acptured.\n    image_grad: bool\n        Whether to capture gradients of the image.\"\"\"\n\n    if image_grad:\n        image.attach_grad()\n        Conv2D.capture_layer_name \u003d None\n        Activation.set_guided_backprop(True)\n    else:\n        # Tell convviz.Conv2D which layer\u0027s output and gradient needs to be recorded\n        Conv2D.capture_layer_name \u003d conv_layer_name\n        Activation.set_guided_backprop(False)\n    \n    # Run the network\n    with autograd.record(train_mode\u003dFalse):\n        out \u003d net(image)\n    \n    # If user didn\u0027t provide a class id, we\u0027ll use the class that the network predicted\n    if class_id \u003d\u003d None:\n        model_output \u003d out.asnumpy()\n        class_id \u003d np.argmax(model_output)\n\n    # Create a one-hot target with class_id and backprop with the created target\n    one_hot_target \u003d mx.nd.one_hot(mx.nd.array([class_id]), 1000)\n    out.backward(one_hot_target, train_mode\u003dFalse)\n\n    if image_grad:\n        return image.grad[0].asnumpy()\n    else:\n        # Return the recorded convolution output and gradient\n        conv_out \u003d Conv2D.conv_output\n        return conv_out[0].asnumpy(), conv_out.grad[0].asnumpy()\n\ndef get_conv_out_grad(net, image, class_id\u003dNone, conv_layer_name\u003dNone):\n    \"\"\"Get the output and gradients of output of a convolutional layer.\n\n    Parameters:\n    ----------\n    net: Block\n        Network to use for visualization.\n    image: NDArray\n        Preprocessed image to use for visualization.\n    class_id: int\n        Category ID this image belongs to. If not provided,\n        network\u0027s prediction will be used.\n    conv_layer_name: str\n        Name of the convolutional layer whose output and output\u0027s gradients need to be acptured.\"\"\"\n    return _get_grad(net, image, class_id, conv_layer_name, image_grad\u003dFalse)\n\ndef get_image_grad(net, image, class_id\u003dNone):\n    \"\"\"Get the gradients of the image.\n\n    Parameters:\n    ----------\n    net: Block\n        Network to use for visualization.\n    image: NDArray\n        Preprocessed image to use for visualization.\n    class_id: int\n        Category ID this image belongs to. If not provided,\n        network\u0027s prediction will be used.\"\"\"\n    return _get_grad(net, image, class_id, image_grad\u003dTrue)\n\ndef grad_to_image(gradient):\n    \"\"\"Convert gradients of image obtained using `get_image_grad`\n    into image. This shows parts of the image that is most strongly activating\n    the output neurons.\"\"\"\n    gradient \u003d gradient - gradient.min()\n    gradient /\u003d gradient.max()\n    gradient \u003d np.uint8(gradient * 255).transpose(1, 2, 0)\n    gradient \u003d gradient[..., ::-1]\n    return gradient\n\ndef get_cam(imggrad, conv_out):\n    \"\"\"Compute CAM. Refer section 3 of https://arxiv.org/abs/1610.02391 for details\"\"\"\n    weights \u003d np.mean(imggrad, axis\u003d(1, 2))\n    cam \u003d np.ones(conv_out.shape[1:], dtype\u003dnp.float32)\n    for i, w in enumerate(weights):\n        cam +\u003d w * conv_out[i, :, :]\n    cam \u003d cv2.resize(cam, (imggrad.shape[1], imggrad.shape[2]))\n    cam \u003d np.maximum(cam, 0)\n    cam \u003d (cam - np.min(cam)) / (np.max(cam) - np.min(cam)) \n    cam \u003d np.uint8(cam * 255)\n    return cam\n\ndef get_guided_grad_cam(cam, imggrad):\n    \"\"\"Compute Guided Grad-CAM. Refer section 3 of https://arxiv.org/abs/1610.02391 for details\"\"\"\n    return np.multiply(cam, imggrad)\n\ndef get_img_heatmap(orig_img, activation_map):\n    \"\"\"Draw a heatmap on top of the original image using intensities from activation_map\"\"\"\n    heatmap \u003d cv2.applyColorMap(activation_map, cv2.COLORMAP_COOL)\n    heatmap \u003d cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)\n    img_heatmap \u003d np.float32(heatmap) + np.float32(orig_img)\n    img_heatmap \u003d img_heatmap / np.max(img_heatmap)\n    img_heatmap *\u003d 255\n    return img_heatmap.astype(int)\n\ndef to_grayscale(cv2im):\n    \"\"\"Convert gradients to grayscale. This gives a saliency map.\"\"\"\n    # How strongly does each position activate the output\n    grayscale_im \u003d np.sum(np.abs(cv2im), axis\u003d0)\n\n    # Normalize between min and 99th percentile\n    im_max \u003d np.percentile(grayscale_im, 99)\n    im_min \u003d np.min(grayscale_im)\n    grayscale_im \u003d np.clip((grayscale_im - im_min) / (im_max - im_min), 0, 1)\n\n    grayscale_im \u003d np.expand_dims(grayscale_im, axis\u003d0)\n    return grayscale_im\n\ndef visualize(net, preprocessed_img, orig_img, conv_layer_name):\n    # Returns grad-cam heatmap, guided grad-cam, guided grad-cam saliency\n    imggrad \u003d get_image_grad(net, preprocessed_img)\n    conv_out, conv_out_grad \u003d get_conv_out_grad(net, preprocessed_img, conv_layer_name\u003dconv_layer_name)\n\n    cam \u003d get_cam(conv_out_grad, conv_out)\n    cam \u003d cv2.resize(cam, (imggrad.shape[1], imggrad.shape[2]))\n    ggcam \u003d get_guided_grad_cam(cam, imggrad)\n    img_ggcam \u003d grad_to_image(ggcam)\n    \n    img_heatmap \u003d get_img_heatmap(orig_img, cam)\n    \n    ggcam_gray \u003d to_grayscale(ggcam)\n    img_ggcam_gray \u003d np.squeeze(grad_to_image(ggcam_gray))\n    \n    return img_heatmap, img_ggcam, img_ggcam_gray\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1566348093822_-2138795181",
      "id": "20190821-004133_1088279944",
      "dateCreated": "2019-08-21 00:41:33.822",
      "dateStarted": "2019-08-21 01:52:21.116",
      "dateFinished": "2019-08-21 01:52:21.145",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\nfrom __future__ import print_function\n\nimport mxnet as mx\nimport mxnet.ndarray as nd\n\nfrom mxnet import gluon\nfrom mxnet import autograd\nfrom mxnet.gluon import nn\n\nimport numpy as np\nimport cv2\n\nclass ReluOp(mx.operator.CustomOp):\n    \"\"\"Modified ReLU as described in section 3.4 in https://arxiv.org/abs/1412.6806.\n    This is used for guided backpropagation to get gradients of the image w.r.t activations.\n    This Operator will do a regular backpropagation if `guided_backprop` is set to False\n    and a guided packpropagation if `guided_backprop` is set to True. Check gradcam_demo.py\n    for an example usage.\"\"\"\n\n    guided_backprop \u003d False\n\n    def forward(self, is_train, req, in_data, out_data, aux):\n        x \u003d in_data[0]\n        y \u003d nd.maximum(x, nd.zeros_like(x))\n        self.assign(out_data[0], req[0], y)\n\n    def backward(self, req, out_grad, in_data, out_data, in_grad, aux):\n        if ReluOp.guided_backprop:\n            # Get output and gradients of output\n            y \u003d out_data[0]\n            dy \u003d out_grad[0]\n            # Zero out the negatives in the gradients of the output\n            dy_positives \u003d nd.maximum(dy, nd.zeros_like(dy))\n            # What output values were greater than 0?\n            y_ones \u003d y.__gt__(0)\n            # Mask out the values for which at least one of dy or y is negative\n            dx \u003d dy_positives * y_ones\n            self.assign(in_grad[0], req[0], dx)\n        else:\n            # Regular backward for ReLU\n            x \u003d in_data[0]\n            x_gt_zero \u003d x.__gt__(0)\n            dx \u003d out_grad[0] * x_gt_zero\n            self.assign(in_grad[0], req[0], dx)\n\ndef set_guided_backprop(mode\u003dTrue):\n    ReluOp.guided_backprop \u003d mode\n\n@mx.operator.register(\"relu\")\nclass ReluProp(mx.operator.CustomOpProp):\n    def __init__(self):\n        super(ReluProp, self).__init__(True)\n\n    def infer_shape(self, in_shapes):\n        data_shape \u003d in_shapes[0]\n        output_shape \u003d data_shape\n        return (data_shape,), (output_shape,), ()\n\n    def create_operator(self, ctx, in_shapes, in_dtypes):\n        return ReluOp()  \n\nclass Activation(mx.gluon.HybridBlock):\n    @staticmethod\n    def set_guided_backprop(mode\u003dFalse):\n        ReluOp.guided_backprop \u003d mode\n\n    def __init__(self, act_type, **kwargs):\n        assert act_type \u003d\u003d \u0027relu\u0027\n        super(Activation, self).__init__(**kwargs)\n\n    def hybrid_forward(self, F, x):\n        return F.Custom(x, op_type\u003d\u0027relu\u0027)\n\nclass Conv2D(mx.gluon.HybridBlock):\n    \"\"\"Wrapper on top of gluon.nn.Conv2D to capture the output and gradients of output of a Conv2D\n    layer in a network. Use `set_capture_layer_name` to select the layer\n    whose outputs and gradients of outputs need to be captured. After the backward pass,\n    `conv_output` will contain the output and `conv_output.grad` will contain the\n    output\u0027s gradients. Check gradcam_demo.py for example usage.\"\"\"\n\n    conv_output \u003d None\n    capture_layer_name \u003d None\n\n    def __init__(self, channels, kernel_size, strides\u003d(1, 1), padding\u003d(0, 0),\n                 dilation\u003d(1, 1), groups\u003d1, layout\u003d\u0027NCHW\u0027,\n                 activation\u003dNone, use_bias\u003dTrue, weight_initializer\u003dNone,\n                 bias_initializer\u003d\u0027zeros\u0027, in_channels\u003d0, **kwargs):\n        super(Conv2D, self).__init__(**kwargs)\n        self.conv \u003d nn.Conv2D(channels, kernel_size, strides\u003dstrides, padding\u003dpadding,\n                             dilation\u003ddilation, groups\u003dgroups, layout\u003dlayout,\n                             activation\u003dactivation, use_bias\u003duse_bias, weight_initializer\u003dweight_initializer,\n                             bias_initializer\u003dbias_initializer, in_channels\u003din_channels)\n\n    def hybrid_forward(self, F, x):\n        out \u003d self.conv(x)\n        name \u003d self._prefix[:-1]\n        if name \u003d\u003d Conv2D.capture_layer_name:\n            out.attach_grad()\n            Conv2D.conv_output \u003d out\n        return out\n\ndef set_capture_layer_name(name):\n    Conv2D.capture_layer_name \u003d name\n\ndef _get_grad(net, image, class_id\u003dNone, conv_layer_name\u003dNone, image_grad\u003dFalse):\n    \"\"\"This is an internal helper function that can be used for either of these\n    but not both at the same time:\n    1. Record the output and gradient of output of an intermediate convolutional layer.\n    2. Record the gradients of the image.\n\n    Parameters\n    ----------\n    image : NDArray\n        Image to visuaize. This is an NDArray with the preprocessed image.\n    class_id : int\n        Category ID this image belongs to. If not provided,\n        network\u0027s prediction will be used.\n    conv_layer_name: str\n        Name of the convolutional layer whose output and output\u0027s gradients need to be acptured.\n    image_grad: bool\n        Whether to capture gradients of the image.\"\"\"\n\n    if image_grad:\n        image.attach_grad()\n        Conv2D.capture_layer_name \u003d None\n        Activation.set_guided_backprop(True)\n    else:\n        # Tell convviz.Conv2D which layer\u0027s output and gradient needs to be recorded\n        Conv2D.capture_layer_name \u003d conv_layer_name\n        Activation.set_guided_backprop(False)\n    \n    # Run the network\n    with autograd.record(train_mode\u003dFalse):\n        out \u003d net(image)\n    \n    # If user didn\u0027t provide a class id, we\u0027ll use the class that the network predicted\n    if class_id \u003d\u003d None:\n        model_output \u003d out.asnumpy()\n        class_id \u003d np.argmax(model_output)\n\n    # Create a one-hot target with class_id and backprop with the created target\n    one_hot_target \u003d mx.nd.one_hot(mx.nd.array([class_id]), 1000)\n    out.backward(one_hot_target, train_mode\u003dFalse)\n\n    if image_grad:\n        return image.grad[0].asnumpy()\n    else:\n        # Return the recorded convolution output and gradient\n        conv_out \u003d Conv2D.conv_output\n        return conv_out[0].asnumpy(), conv_out.grad[0].asnumpy()\n\ndef get_conv_out_grad(net, image, class_id\u003dNone, conv_layer_name\u003dNone):\n    \"\"\"Get the output and gradients of output of a convolutional layer.\n\n    Parameters:\n    ----------\n    net: Block\n        Network to use for visualization.\n    image: NDArray\n        Preprocessed image to use for visualization.\n    class_id: int\n        Category ID this image belongs to. If not provided,\n        network\u0027s prediction will be used.\n    conv_layer_name: str\n        Name of the convolutional layer whose output and output\u0027s gradients need to be acptured.\"\"\"\n    return _get_grad(net, image, class_id, conv_layer_name, image_grad\u003dFalse)\n\ndef get_image_grad(net, image, class_id\u003dNone):\n    \"\"\"Get the gradients of the image.\n\n    Parameters:\n    ----------\n    net: Block\n        Network to use for visualization.\n    image: NDArray\n        Preprocessed image to use for visualization.\n    class_id: int\n        Category ID this image belongs to. If not provided,\n        network\u0027s prediction will be used.\"\"\"\n    return _get_grad(net, image, class_id, image_grad\u003dTrue)\n\ndef grad_to_image(gradient):\n    \"\"\"Convert gradients of image obtained using `get_image_grad`\n    into image. This shows parts of the image that is most strongly activating\n    the output neurons.\"\"\"\n    gradient \u003d gradient - gradient.min()\n    gradient /\u003d gradient.max()\n    gradient \u003d np.uint8(gradient * 255).transpose(1, 2, 0)\n    gradient \u003d gradient[..., ::-1]\n    return gradient\n\ndef get_cam(imggrad, conv_out):\n    \"\"\"Compute CAM. Refer section 3 of https://arxiv.org/abs/1610.02391 for details\"\"\"\n    weights \u003d np.mean(imggrad, axis\u003d(1, 2))\n    cam \u003d np.ones(conv_out.shape[1:], dtype\u003dnp.float32)\n    for i, w in enumerate(weights):\n        cam +\u003d w * conv_out[i, :, :]\n    cam \u003d cv2.resize(cam, (imggrad.shape[1], imggrad.shape[2]))\n    cam \u003d np.maximum(cam, 0)\n    cam \u003d (cam - np.min(cam)) / (np.max(cam) - np.min(cam)) \n    cam \u003d np.uint8(cam * 255)\n    return cam\n\ndef get_guided_grad_cam(cam, imggrad):\n    \"\"\"Compute Guided Grad-CAM. Refer section 3 of https://arxiv.org/abs/1610.02391 for details\"\"\"\n    return np.multiply(cam, imggrad)\n\ndef get_img_heatmap(orig_img, activation_map):\n    \"\"\"Draw a heatmap on top of the original image using intensities from activation_map\"\"\"\n    heatmap \u003d cv2.applyColorMap(activation_map, cv2.COLORMAP_COOL)\n    heatmap \u003d cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)\n    img_heatmap \u003d np.float32(heatmap) + np.float32(orig_img)\n    img_heatmap \u003d img_heatmap / np.max(img_heatmap)\n    img_heatmap *\u003d 255\n    return img_heatmap.astype(int)\n\ndef to_grayscale(cv2im):\n    \"\"\"Convert gradients to grayscale. This gives a saliency map.\"\"\"\n    # How strongly does each position activate the output\n    grayscale_im \u003d np.sum(np.abs(cv2im), axis\u003d0)\n\n    # Normalize between min and 99th percentile\n    im_max \u003d np.percentile(grayscale_im, 99)\n    im_min \u003d np.min(grayscale_im)\n    grayscale_im \u003d np.clip((grayscale_im - im_min) / (im_max - im_min), 0, 1)\n\n    grayscale_im \u003d np.expand_dims(grayscale_im, axis\u003d0)\n    return grayscale_im\n\ndef gradcam_visualize(net, preprocessed_img, orig_img, conv_layer_name):\n    # Returns grad-cam heatmap, guided grad-cam, guided grad-cam saliency\n    imggrad \u003d get_image_grad(net, preprocessed_img)\n    conv_out, conv_out_grad \u003d get_conv_out_grad(net, preprocessed_img, conv_layer_name\u003dconv_layer_name)\n\n    cam \u003d get_cam(conv_out_grad, conv_out)\n    cam \u003d cv2.resize(cam, (imggrad.shape[1], imggrad.shape[2]))\n    ggcam \u003d get_guided_grad_cam(cam, imggrad)\n    img_ggcam \u003d grad_to_image(ggcam)\n    \n    img_heatmap \u003d get_img_heatmap(orig_img, cam)\n    \n    ggcam_gray \u003d to_grayscale(ggcam)\n    img_ggcam_gray \u003d np.squeeze(grad_to_image(ggcam_gray))\n    \n    return img_heatmap, img_ggcam, img_ggcam_gray",
      "user": "anonymous",
      "dateUpdated": "2019-08-21 01:52:21.215",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[01:52:21] src/c_api/../operator/custom/custom-inl.h:56: New registration is overriding existing custom operator relu\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1566348376974_-2134524774",
      "id": "20190821-004616_1102492430",
      "dateCreated": "2019-08-21 00:46:16.974",
      "dateStarted": "2019-08-21 01:52:21.257",
      "dateFinished": "2019-08-21 01:52:21.430",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nfrom __future__ import print_function\n\nimport mxnet as mx\nfrom mxnet import gluon\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nimport os\nfrom mxnet.gluon.model_zoo import model_store\n\nfrom mxnet.initializer import Xavier\nfrom mxnet.gluon.nn import MaxPool2D, Flatten, Dense, Dropout, BatchNorm\n\nclass VGG(mx.gluon.HybridBlock):\n    def __init__(self, layers, filters, classes\u003d1000, **kwargs):\n        super(VGG, self).__init__(**kwargs)\n        assert len(layers) \u003d\u003d len(filters)\n        with self.name_scope():\n            self.features \u003d self._make_features(layers, filters)\n            self.features.add(Dense(4096, activation\u003d\u0027relu\u0027,\n                                       weight_initializer\u003d\u0027normal\u0027,\n                                       bias_initializer\u003d\u0027zeros\u0027))\n            self.features.add(Dropout(rate\u003d0.5))\n            self.features.add(Dense(4096, activation\u003d\u0027relu\u0027,\n                                       weight_initializer\u003d\u0027normal\u0027,\n                                       bias_initializer\u003d\u0027zeros\u0027))\n            self.features.add(Dropout(rate\u003d0.5))\n            self.output \u003d Dense(classes,\n                                   weight_initializer\u003d\u0027normal\u0027,\n                                   bias_initializer\u003d\u0027zeros\u0027)\n\n    def _make_features(self, layers, filters):\n        featurizer \u003d mx.gluon.nn.HybridSequential(prefix\u003d\u0027\u0027)\n        for i, num in enumerate(layers):\n            for _ in range(num):\n                featurizer.add(Conv2D(filters[i], kernel_size\u003d3, padding\u003d1,\n                                         weight_initializer\u003dXavier(rnd_type\u003d\u0027gaussian\u0027,\n                                                                   factor_type\u003d\u0027out\u0027,\n                                                                   magnitude\u003d2),\n                                         bias_initializer\u003d\u0027zeros\u0027))\n                featurizer.add(Activation(\u0027relu\u0027))\n            featurizer.add(MaxPool2D(strides\u003d2))\n        return featurizer\n\n    def hybrid_forward(self, F, x):\n        x \u003d self.features(x)\n        x \u003d self.output(x)\n        return x\n",
      "user": "anonymous",
      "dateUpdated": "2019-08-21 01:52:21.456",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1566348067860_447893193",
      "id": "20190821-004107_1633512143",
      "dateCreated": "2019-08-21 00:41:07.860",
      "dateStarted": "2019-08-21 01:52:21.489",
      "dateFinished": "2019-08-21 01:52:21.520",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n# Number of convolution layers and number of filters for each VGG configuration.\n# Check the VGG [paper](https://arxiv.org/abs/1409.1556) for more details on the different architectures.\nspec \u003d {11: ([1, 1, 2, 2, 2], [64, 128, 256, 512, 512]),\n            13: ([2, 2, 2, 2, 2], [64, 128, 256, 512, 512]),\n            16: ([2, 2, 3, 3, 3], [64, 128, 256, 512, 512]),\n            19: ([2, 2, 4, 4, 4], [64, 128, 256, 512, 512])}\n\nfrom mxnet import init\nfrom mxnet.gluon.model_zoo.vision import mobilenet_v2_1_0\nfrom mxnet.gluon.model_zoo.vision import resnet50_v1\nfrom mxnet.gluon.model_zoo.vision import resnet152_v2\n\ndef get_network(ctx\u003dmx.cpu(), root\u003dos.path.join(\u0027~\u0027, \u0027.mxnet\u0027, \u0027models\u0027), **kwargs):\n    # Get the number of convolution layers and filters\n    #layers, filters \u003d spec[num_layers]\n\n    # Build the modified VGG network\n    #net \u003d VGG(layers, filters, **kwargs)\n    # net.initialize(ctx\u003dctx)\n    \n    # Get the pretrained model\n    #zoo_net \u003d mx.gluon.model_zoo.vision.get_vgg(num_layers, pretrained\u003dTrue, ctx\u003dctx)\n    #zoo_net \u003d resnet152_v2(pretrained\u003dTrue)\n    \n    print(\"Loading\")\n    net_type \u003d resnet50_v1\n    pretrained_net \u003d net_type(pretrained\u003dTrue)\n \n    print(\"Init\")\n    epoch_net \u003d net_type(classes\u003dlen(train_map))\n    epoch_net.features \u003d pretrained_net.features\n    epoch_net.output.initialize(init.Xavier())\n \n    print(\"Disk files\")\n    #epoch_net.collect_params().load(\u0027/data/checkpoints/%d-%d.params\u0027 % (epoch, max_checkpoint))\n    epoch_net.load_parameters(\u0027/data/resnet50_archive/checkpoints/0.params\u0027)\n  \n    # Set the parameters in the new network\n    \n    print(\"Collect_params\")\n    print(epoch_net.collect_params().keys())\n    params \u003d epoch_net.collect_params()\n    for key in params:\n        print(key)\n        param \u003d params[key]\n        print(param)\n        print(epoch_net.prefix)\n        print(epoch_net.prefix+key.replace(epoch_net.prefix, \u0027\u0027))\n        epoch_net.collect_params()[key].set_data(param.data())\n\n    return epoch_net\n\ndef build_network(**kwargs):\n    return get_network(**kwargs)\n    \nimage_sz \u003d (224, 224)\n\ndef preprocess(data):\n    data \u003d mx.image.imresize(data, image_sz[0], image_sz[1])\n    data \u003d data.astype(np.float32)\n    data \u003d data/255\n    data \u003d mx.image.color_normalize(data,\n                                    mean\u003dmx.nd.array([0.485, 0.456, 0.406]),\n                                    std\u003dmx.nd.array([0.229, 0.224, 0.225]))\n    data \u003d mx.nd.transpose(data, (2,0,1))\n    return data\n\nnetwork \u003d build_network(ctx\u003dmx.cpu())    ",
      "user": "anonymous",
      "dateUpdated": "2019-08-21 01:52:21.586",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Loading\nInit\nDisk files\nCollect_params\nodict_keys([\u0027resnetv116_conv0_weight\u0027, \u0027resnetv116_batchnorm0_gamma\u0027, \u0027resnetv116_batchnorm0_beta\u0027, \u0027resnetv116_batchnorm0_running_mean\u0027, \u0027resnetv116_batchnorm0_running_var\u0027, \u0027resnetv116_stage1_conv0_weight\u0027, \u0027resnetv116_stage1_conv0_bias\u0027, \u0027resnetv116_stage1_batchnorm0_gamma\u0027, \u0027resnetv116_stage1_batchnorm0_beta\u0027, \u0027resnetv116_stage1_batchnorm0_running_mean\u0027, \u0027resnetv116_stage1_batchnorm0_running_var\u0027, \u0027resnetv116_stage1_conv1_weight\u0027, \u0027resnetv116_stage1_batchnorm1_gamma\u0027, \u0027resnetv116_stage1_batchnorm1_beta\u0027, \u0027resnetv116_stage1_batchnorm1_running_mean\u0027, \u0027resnetv116_stage1_batchnorm1_running_var\u0027, \u0027resnetv116_stage1_conv2_weight\u0027, \u0027resnetv116_stage1_conv2_bias\u0027, \u0027resnetv116_stage1_batchnorm2_gamma\u0027, \u0027resnetv116_stage1_batchnorm2_beta\u0027, \u0027resnetv116_stage1_batchnorm2_running_mean\u0027, \u0027resnetv116_stage1_batchnorm2_running_var\u0027, \u0027resnetv116_stage1_conv3_weight\u0027, \u0027resnetv116_stage1_batchnorm3_gamma\u0027, \u0027resnetv116_stage1_batchnorm3_beta\u0027, \u0027resnetv116_stage1_batchnorm3_running_mean\u0027, \u0027resnetv116_stage1_batchnorm3_running_var\u0027, \u0027resnetv116_stage1_conv4_weight\u0027, \u0027resnetv116_stage1_conv4_bias\u0027, \u0027resnetv116_stage1_batchnorm4_gamma\u0027, \u0027resnetv116_stage1_batchnorm4_beta\u0027, \u0027resnetv116_stage1_batchnorm4_running_mean\u0027, \u0027resnetv116_stage1_batchnorm4_running_var\u0027, \u0027resnetv116_stage1_conv5_weight\u0027, \u0027resnetv116_stage1_batchnorm5_gamma\u0027, \u0027resnetv116_stage1_batchnorm5_beta\u0027, \u0027resnetv116_stage1_batchnorm5_running_mean\u0027, \u0027resnetv116_stage1_batchnorm5_running_var\u0027, \u0027resnetv116_stage1_conv6_weight\u0027, \u0027resnetv116_stage1_conv6_bias\u0027, \u0027resnetv116_stage1_batchnorm6_gamma\u0027, \u0027resnetv116_stage1_batchnorm6_beta\u0027, \u0027resnetv116_stage1_batchnorm6_running_mean\u0027, \u0027resnetv116_stage1_batchnorm6_running_var\u0027, \u0027resnetv116_stage1_conv7_weight\u0027, \u0027resnetv116_stage1_conv7_bias\u0027, \u0027resnetv116_stage1_batchnorm7_gamma\u0027, \u0027resnetv116_stage1_batchnorm7_beta\u0027, \u0027resnetv116_stage1_batchnorm7_running_mean\u0027, \u0027resnetv116_stage1_batchnorm7_running_var\u0027, \u0027resnetv116_stage1_conv8_weight\u0027, \u0027resnetv116_stage1_batchnorm8_gamma\u0027, \u0027resnetv116_stage1_batchnorm8_beta\u0027, \u0027resnetv116_stage1_batchnorm8_running_mean\u0027, \u0027resnetv116_stage1_batchnorm8_running_var\u0027, \u0027resnetv116_stage1_conv9_weight\u0027, \u0027resnetv116_stage1_conv9_bias\u0027, \u0027resnetv116_stage1_batchnorm9_gamma\u0027, \u0027resnetv116_stage1_batchnorm9_beta\u0027, \u0027resnetv116_stage1_batchnorm9_running_mean\u0027, \u0027resnetv116_stage1_batchnorm9_running_var\u0027, \u0027resnetv116_stage2_conv0_weight\u0027, \u0027resnetv116_stage2_conv0_bias\u0027, \u0027resnetv116_stage2_batchnorm0_gamma\u0027, \u0027resnetv116_stage2_batchnorm0_beta\u0027, \u0027resnetv116_stage2_batchnorm0_running_mean\u0027, \u0027resnetv116_stage2_batchnorm0_running_var\u0027, \u0027resnetv116_stage2_conv1_weight\u0027, \u0027resnetv116_stage2_batchnorm1_gamma\u0027, \u0027resnetv116_stage2_batchnorm1_beta\u0027, \u0027resnetv116_stage2_batchnorm1_running_mean\u0027, \u0027resnetv116_stage2_batchnorm1_running_var\u0027, \u0027resnetv116_stage2_conv2_weight\u0027, \u0027resnetv116_stage2_conv2_bias\u0027, \u0027resnetv116_stage2_batchnorm2_gamma\u0027, \u0027resnetv116_stage2_batchnorm2_beta\u0027, \u0027resnetv116_stage2_batchnorm2_running_mean\u0027, \u0027resnetv116_stage2_batchnorm2_running_var\u0027, \u0027resnetv116_stage2_conv3_weight\u0027, \u0027resnetv116_stage2_batchnorm3_gamma\u0027, \u0027resnetv116_stage2_batchnorm3_beta\u0027, \u0027resnetv116_stage2_batchnorm3_running_mean\u0027, \u0027resnetv116_stage2_batchnorm3_running_var\u0027, \u0027resnetv116_stage2_conv4_weight\u0027, \u0027resnetv116_stage2_conv4_bias\u0027, \u0027resnetv116_stage2_batchnorm4_gamma\u0027, \u0027resnetv116_stage2_batchnorm4_beta\u0027, \u0027resnetv116_stage2_batchnorm4_running_mean\u0027, \u0027resnetv116_stage2_batchnorm4_running_var\u0027, \u0027resnetv116_stage2_conv5_weight\u0027, \u0027resnetv116_stage2_batchnorm5_gamma\u0027, \u0027resnetv116_stage2_batchnorm5_beta\u0027, \u0027resnetv116_stage2_batchnorm5_running_mean\u0027, \u0027resnetv116_stage2_batchnorm5_running_var\u0027, \u0027resnetv116_stage2_conv6_weight\u0027, \u0027resnetv116_stage2_conv6_bias\u0027, \u0027resnetv116_stage2_batchnorm6_gamma\u0027, \u0027resnetv116_stage2_batchnorm6_beta\u0027, \u0027resnetv116_stage2_batchnorm6_running_mean\u0027, \u0027resnetv116_stage2_batchnorm6_running_var\u0027, \u0027resnetv116_stage2_conv7_weight\u0027, \u0027resnetv116_stage2_conv7_bias\u0027, \u0027resnetv116_stage2_batchnorm7_gamma\u0027, \u0027resnetv116_stage2_batchnorm7_beta\u0027, \u0027resnetv116_stage2_batchnorm7_running_mean\u0027, \u0027resnetv116_stage2_batchnorm7_running_var\u0027, \u0027resnetv116_stage2_conv8_weight\u0027, \u0027resnetv116_stage2_batchnorm8_gamma\u0027, \u0027resnetv116_stage2_batchnorm8_beta\u0027, \u0027resnetv116_stage2_batchnorm8_running_mean\u0027, \u0027resnetv116_stage2_batchnorm8_running_var\u0027, \u0027resnetv116_stage2_conv9_weight\u0027, \u0027resnetv116_stage2_conv9_bias\u0027, \u0027resnetv116_stage2_batchnorm9_gamma\u0027, \u0027resnetv116_stage2_batchnorm9_beta\u0027, \u0027resnetv116_stage2_batchnorm9_running_mean\u0027, \u0027resnetv116_stage2_batchnorm9_running_var\u0027, \u0027resnetv116_stage2_conv10_weight\u0027, \u0027resnetv116_stage2_conv10_bias\u0027, \u0027resnetv116_stage2_batchnorm10_gamma\u0027, \u0027resnetv116_stage2_batchnorm10_beta\u0027, \u0027resnetv116_stage2_batchnorm10_running_mean\u0027, \u0027resnetv116_stage2_batchnorm10_running_var\u0027, \u0027resnetv116_stage2_conv11_weight\u0027, \u0027resnetv116_stage2_batchnorm11_gamma\u0027, \u0027resnetv116_stage2_batchnorm11_beta\u0027, \u0027resnetv116_stage2_batchnorm11_running_mean\u0027, \u0027resnetv116_stage2_batchnorm11_running_var\u0027, \u0027resnetv116_stage2_conv12_weight\u0027, \u0027resnetv116_stage2_conv12_bias\u0027, \u0027resnetv116_stage2_batchnorm12_gamma\u0027, \u0027resnetv116_stage2_batchnorm12_beta\u0027, \u0027resnetv116_stage2_batchnorm12_running_mean\u0027, \u0027resnetv116_stage2_batchnorm12_running_var\u0027, \u0027resnetv116_stage3_conv0_weight\u0027, \u0027resnetv116_stage3_conv0_bias\u0027, \u0027resnetv116_stage3_batchnorm0_gamma\u0027, \u0027resnetv116_stage3_batchnorm0_beta\u0027, \u0027resnetv116_stage3_batchnorm0_running_mean\u0027, \u0027resnetv116_stage3_batchnorm0_running_var\u0027, \u0027resnetv116_stage3_conv1_weight\u0027, \u0027resnetv116_stage3_batchnorm1_gamma\u0027, \u0027resnetv116_stage3_batchnorm1_beta\u0027, \u0027resnetv116_stage3_batchnorm1_running_mean\u0027, \u0027resnetv116_stage3_batchnorm1_running_var\u0027, \u0027resnetv116_stage3_conv2_weight\u0027, \u0027resnetv116_stage3_conv2_bias\u0027, \u0027resnetv116_stage3_batchnorm2_gamma\u0027, \u0027resnetv116_stage3_batchnorm2_beta\u0027, \u0027resnetv116_stage3_batchnorm2_running_mean\u0027, \u0027resnetv116_stage3_batchnorm2_running_var\u0027, \u0027resnetv116_stage3_conv3_weight\u0027, \u0027resnetv116_stage3_batchnorm3_gamma\u0027, \u0027resnetv116_stage3_batchnorm3_beta\u0027, \u0027resnetv116_stage3_batchnorm3_running_mean\u0027, \u0027resnetv116_stage3_batchnorm3_running_var\u0027, \u0027resnetv116_stage3_conv4_weight\u0027, \u0027resnetv116_stage3_conv4_bias\u0027, \u0027resnetv116_stage3_batchnorm4_gamma\u0027, \u0027resnetv116_stage3_batchnorm4_beta\u0027, \u0027resnetv116_stage3_batchnorm4_running_mean\u0027, \u0027resnetv116_stage3_batchnorm4_running_var\u0027, \u0027resnetv116_stage3_conv5_weight\u0027, \u0027resnetv116_stage3_batchnorm5_gamma\u0027, \u0027resnetv116_stage3_batchnorm5_beta\u0027, \u0027resnetv116_stage3_batchnorm5_running_mean\u0027, \u0027resnetv116_stage3_batchnorm5_running_var\u0027, \u0027resnetv116_stage3_conv6_weight\u0027, \u0027resnetv116_stage3_conv6_bias\u0027, \u0027resnetv116_stage3_batchnorm6_gamma\u0027, \u0027resnetv116_stage3_batchnorm6_beta\u0027, \u0027resnetv116_stage3_batchnorm6_running_mean\u0027, \u0027resnetv116_stage3_batchnorm6_running_var\u0027, \u0027resnetv116_stage3_conv7_weight\u0027, \u0027resnetv116_stage3_conv7_bias\u0027, \u0027resnetv116_stage3_batchnorm7_gamma\u0027, \u0027resnetv116_stage3_batchnorm7_beta\u0027, \u0027resnetv116_stage3_batchnorm7_running_mean\u0027, \u0027resnetv116_stage3_batchnorm7_running_var\u0027, \u0027resnetv116_stage3_conv8_weight\u0027, \u0027resnetv116_stage3_batchnorm8_gamma\u0027, \u0027resnetv116_stage3_batchnorm8_beta\u0027, \u0027resnetv116_stage3_batchnorm8_running_mean\u0027, \u0027resnetv116_stage3_batchnorm8_running_var\u0027, \u0027resnetv116_stage3_conv9_weight\u0027, \u0027resnetv116_stage3_conv9_bias\u0027, \u0027resnetv116_stage3_batchnorm9_gamma\u0027, \u0027resnetv116_stage3_batchnorm9_beta\u0027, \u0027resnetv116_stage3_batchnorm9_running_mean\u0027, \u0027resnetv116_stage3_batchnorm9_running_var\u0027, \u0027resnetv116_stage3_conv10_weight\u0027, \u0027resnetv116_stage3_conv10_bias\u0027, \u0027resnetv116_stage3_batchnorm10_gamma\u0027, \u0027resnetv116_stage3_batchnorm10_beta\u0027, \u0027resnetv116_stage3_batchnorm10_running_mean\u0027, \u0027resnetv116_stage3_batchnorm10_running_var\u0027, \u0027resnetv116_stage3_conv11_weight\u0027, \u0027resnetv116_stage3_batchnorm11_gamma\u0027, \u0027resnetv116_stage3_batchnorm11_beta\u0027, \u0027resnetv116_stage3_batchnorm11_running_mean\u0027, \u0027resnetv116_stage3_batchnorm11_running_var\u0027, \u0027resnetv116_stage3_conv12_weight\u0027, \u0027resnetv116_stage3_conv12_bias\u0027, \u0027resnetv116_stage3_batchnorm12_gamma\u0027, \u0027resnetv116_stage3_batchnorm12_beta\u0027, \u0027resnetv116_stage3_batchnorm12_running_mean\u0027, \u0027resnetv116_stage3_batchnorm12_running_var\u0027, \u0027resnetv116_stage3_conv13_weight\u0027, \u0027resnetv116_stage3_conv13_bias\u0027, \u0027resnetv116_stage3_batchnorm13_gamma\u0027, \u0027resnetv116_stage3_batchnorm13_beta\u0027, \u0027resnetv116_stage3_batchnorm13_running_mean\u0027, \u0027resnetv116_stage3_batchnorm13_running_var\u0027, \u0027resnetv116_stage3_conv14_weight\u0027, \u0027resnetv116_stage3_batchnorm14_gamma\u0027, \u0027resnetv116_stage3_batchnorm14_beta\u0027, \u0027resnetv116_stage3_batchnorm14_running_mean\u0027, \u0027resnetv116_stage3_batchnorm14_running_var\u0027, \u0027resnetv116_stage3_conv15_weight\u0027, \u0027resnetv116_stage3_conv15_bias\u0027, \u0027resnetv116_stage3_batchnorm15_gamma\u0027, \u0027resnetv116_stage3_batchnorm15_beta\u0027, \u0027resnetv116_stage3_batchnorm15_running_mean\u0027, \u0027resnetv116_stage3_batchnorm15_running_var\u0027, \u0027resnetv116_stage3_conv16_weight\u0027, \u0027resnetv116_stage3_conv16_bias\u0027, \u0027resnetv116_stage3_batchnorm16_gamma\u0027, \u0027resnetv116_stage3_batchnorm16_beta\u0027, \u0027resnetv116_stage3_batchnorm16_running_mean\u0027, \u0027resnetv116_stage3_batchnorm16_running_var\u0027, \u0027resnetv116_stage3_conv17_weight\u0027, \u0027resnetv116_stage3_batchnorm17_gamma\u0027, \u0027resnetv116_stage3_batchnorm17_beta\u0027, \u0027resnetv116_stage3_batchnorm17_running_mean\u0027, \u0027resnetv116_stage3_batchnorm17_running_var\u0027, \u0027resnetv116_stage3_conv18_weight\u0027, \u0027resnetv116_stage3_conv18_bias\u0027, \u0027resnetv116_stage3_batchnorm18_gamma\u0027, \u0027resnetv116_stage3_batchnorm18_beta\u0027, \u0027resnetv116_stage3_batchnorm18_running_mean\u0027, \u0027resnetv116_stage3_batchnorm18_running_var\u0027, \u0027resnetv116_stage4_conv0_weight\u0027, \u0027resnetv116_stage4_conv0_bias\u0027, \u0027resnetv116_stage4_batchnorm0_gamma\u0027, \u0027resnetv116_stage4_batchnorm0_beta\u0027, \u0027resnetv116_stage4_batchnorm0_running_mean\u0027, \u0027resnetv116_stage4_batchnorm0_running_var\u0027, \u0027resnetv116_stage4_conv1_weight\u0027, \u0027resnetv116_stage4_batchnorm1_gamma\u0027, \u0027resnetv116_stage4_batchnorm1_beta\u0027, \u0027resnetv116_stage4_batchnorm1_running_mean\u0027, \u0027resnetv116_stage4_batchnorm1_running_var\u0027, \u0027resnetv116_stage4_conv2_weight\u0027, \u0027resnetv116_stage4_conv2_bias\u0027, \u0027resnetv116_stage4_batchnorm2_gamma\u0027, \u0027resnetv116_stage4_batchnorm2_beta\u0027, \u0027resnetv116_stage4_batchnorm2_running_mean\u0027, \u0027resnetv116_stage4_batchnorm2_running_var\u0027, \u0027resnetv116_stage4_conv3_weight\u0027, \u0027resnetv116_stage4_batchnorm3_gamma\u0027, \u0027resnetv116_stage4_batchnorm3_beta\u0027, \u0027resnetv116_stage4_batchnorm3_running_mean\u0027, \u0027resnetv116_stage4_batchnorm3_running_var\u0027, \u0027resnetv116_stage4_conv4_weight\u0027, \u0027resnetv116_stage4_conv4_bias\u0027, \u0027resnetv116_stage4_batchnorm4_gamma\u0027, \u0027resnetv116_stage4_batchnorm4_beta\u0027, \u0027resnetv116_stage4_batchnorm4_running_mean\u0027, \u0027resnetv116_stage4_batchnorm4_running_var\u0027, \u0027resnetv116_stage4_conv5_weight\u0027, \u0027resnetv116_stage4_batchnorm5_gamma\u0027, \u0027resnetv116_stage4_batchnorm5_beta\u0027, \u0027resnetv116_stage4_batchnorm5_running_mean\u0027, \u0027resnetv116_stage4_batchnorm5_running_var\u0027, \u0027resnetv116_stage4_conv6_weight\u0027, \u0027resnetv116_stage4_conv6_bias\u0027, \u0027resnetv116_stage4_batchnorm6_gamma\u0027, \u0027resnetv116_stage4_batchnorm6_beta\u0027, \u0027resnetv116_stage4_batchnorm6_running_mean\u0027, \u0027resnetv116_stage4_batchnorm6_running_var\u0027, \u0027resnetv116_stage4_conv7_weight\u0027, \u0027resnetv116_stage4_conv7_bias\u0027, \u0027resnetv116_stage4_batchnorm7_gamma\u0027, \u0027resnetv116_stage4_batchnorm7_beta\u0027, \u0027resnetv116_stage4_batchnorm7_running_mean\u0027, \u0027resnetv116_stage4_batchnorm7_running_var\u0027, \u0027resnetv116_stage4_conv8_weight\u0027, \u0027resnetv116_stage4_batchnorm8_gamma\u0027, \u0027resnetv116_stage4_batchnorm8_beta\u0027, \u0027resnetv116_stage4_batchnorm8_running_mean\u0027, \u0027resnetv116_stage4_batchnorm8_running_var\u0027, \u0027resnetv116_stage4_conv9_weight\u0027, \u0027resnetv116_stage4_conv9_bias\u0027, \u0027resnetv116_stage4_batchnorm9_gamma\u0027, \u0027resnetv116_stage4_batchnorm9_beta\u0027, \u0027resnetv116_stage4_batchnorm9_running_mean\u0027, \u0027resnetv116_stage4_batchnorm9_running_var\u0027, \u0027resnetv117_dense0_weight\u0027, \u0027resnetv117_dense0_bias\u0027])\nresnetv116_conv0_weight\nParameter resnetv116_conv0_weight (shape\u003d(64, 3, 7, 7), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_conv0_weight\nresnetv116_batchnorm0_gamma\nParameter resnetv116_batchnorm0_gamma (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_batchnorm0_gamma\nresnetv116_batchnorm0_beta\nParameter resnetv116_batchnorm0_beta (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_batchnorm0_beta\nresnetv116_batchnorm0_running_mean\nParameter resnetv116_batchnorm0_running_mean (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_batchnorm0_running_mean\nresnetv116_batchnorm0_running_var\nParameter resnetv116_batchnorm0_running_var (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_batchnorm0_running_var\nresnetv116_stage1_conv0_weight\nParameter resnetv116_stage1_conv0_weight (shape\u003d(64, 64, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv0_weight\nresnetv116_stage1_conv0_bias\nParameter resnetv116_stage1_conv0_bias (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv0_bias\nresnetv116_stage1_batchnorm0_gamma\nParameter resnetv116_stage1_batchnorm0_gamma (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm0_gamma\nresnetv116_stage1_batchnorm0_beta\nParameter resnetv116_stage1_batchnorm0_beta (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm0_beta\nresnetv116_stage1_batchnorm0_running_mean\nParameter resnetv116_stage1_batchnorm0_running_mean (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm0_running_mean\nresnetv116_stage1_batchnorm0_running_var\nParameter resnetv116_stage1_batchnorm0_running_var (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm0_running_var\nresnetv116_stage1_conv1_weight\nParameter resnetv116_stage1_conv1_weight (shape\u003d(64, 64, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv1_weight\nresnetv116_stage1_batchnorm1_gamma\nParameter resnetv116_stage1_batchnorm1_gamma (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm1_gamma\nresnetv116_stage1_batchnorm1_beta\nParameter resnetv116_stage1_batchnorm1_beta (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm1_beta\nresnetv116_stage1_batchnorm1_running_mean\nParameter resnetv116_stage1_batchnorm1_running_mean (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm1_running_mean\nresnetv116_stage1_batchnorm1_running_var\nParameter resnetv116_stage1_batchnorm1_running_var (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm1_running_var\nresnetv116_stage1_conv2_weight\nParameter resnetv116_stage1_conv2_weight (shape\u003d(256, 64, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv2_weight\nresnetv116_stage1_conv2_bias\nParameter resnetv116_stage1_conv2_bias (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv2_bias\nresnetv116_stage1_batchnorm2_gamma\nParameter resnetv116_stage1_batchnorm2_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm2_gamma\nresnetv116_stage1_batchnorm2_beta\nParameter resnetv116_stage1_batchnorm2_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm2_beta\nresnetv116_stage1_batchnorm2_running_mean\nParameter resnetv116_stage1_batchnorm2_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm2_running_mean\nresnetv116_stage1_batchnorm2_running_var\nParameter resnetv116_stage1_batchnorm2_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm2_running_var\nresnetv116_stage1_conv3_weight\nParameter resnetv116_stage1_conv3_weight (shape\u003d(256, 64, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv3_weight\nresnetv116_stage1_batchnorm3_gamma\nParameter resnetv116_stage1_batchnorm3_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm3_gamma\nresnetv116_stage1_batchnorm3_beta\nParameter resnetv116_stage1_batchnorm3_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm3_beta\nresnetv116_stage1_batchnorm3_running_mean\nParameter resnetv116_stage1_batchnorm3_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm3_running_mean\nresnetv116_stage1_batchnorm3_running_var\nParameter resnetv116_stage1_batchnorm3_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm3_running_var\nresnetv116_stage1_conv4_weight\nParameter resnetv116_stage1_conv4_weight (shape\u003d(64, 256, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv4_weight\nresnetv116_stage1_conv4_bias\nParameter resnetv116_stage1_conv4_bias (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv4_bias\nresnetv116_stage1_batchnorm4_gamma\nParameter resnetv116_stage1_batchnorm4_gamma (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm4_gamma\nresnetv116_stage1_batchnorm4_beta\nParameter resnetv116_stage1_batchnorm4_beta (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm4_beta\nresnetv116_stage1_batchnorm4_running_mean\nParameter resnetv116_stage1_batchnorm4_running_mean (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm4_running_mean\nresnetv116_stage1_batchnorm4_running_var\nParameter resnetv116_stage1_batchnorm4_running_var (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm4_running_var\nresnetv116_stage1_conv5_weight\nParameter resnetv116_stage1_conv5_weight (shape\u003d(64, 64, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv5_weight\nresnetv116_stage1_batchnorm5_gamma\nParameter resnetv116_stage1_batchnorm5_gamma (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm5_gamma\nresnetv116_stage1_batchnorm5_beta\nParameter resnetv116_stage1_batchnorm5_beta (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm5_beta\nresnetv116_stage1_batchnorm5_running_mean\nParameter resnetv116_stage1_batchnorm5_running_mean (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm5_running_mean\nresnetv116_stage1_batchnorm5_running_var\nParameter resnetv116_stage1_batchnorm5_running_var (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm5_running_var\nresnetv116_stage1_conv6_weight\nParameter resnetv116_stage1_conv6_weight (shape\u003d(256, 64, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv6_weight\nresnetv116_stage1_conv6_bias\nParameter resnetv116_stage1_conv6_bias (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv6_bias\nresnetv116_stage1_batchnorm6_gamma\nParameter resnetv116_stage1_batchnorm6_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm6_gamma\nresnetv116_stage1_batchnorm6_beta\nParameter resnetv116_stage1_batchnorm6_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm6_beta\nresnetv116_stage1_batchnorm6_running_mean\nParameter resnetv116_stage1_batchnorm6_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm6_running_mean\nresnetv116_stage1_batchnorm6_running_var\nParameter resnetv116_stage1_batchnorm6_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm6_running_var\nresnetv116_stage1_conv7_weight\nParameter resnetv116_stage1_conv7_weight (shape\u003d(64, 256, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv7_weight\nresnetv116_stage1_conv7_bias\nParameter resnetv116_stage1_conv7_bias (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv7_bias\nresnetv116_stage1_batchnorm7_gamma\nParameter resnetv116_stage1_batchnorm7_gamma (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm7_gamma\nresnetv116_stage1_batchnorm7_beta\nParameter resnetv116_stage1_batchnorm7_beta (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm7_beta\nresnetv116_stage1_batchnorm7_running_mean\nParameter resnetv116_stage1_batchnorm7_running_mean (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm7_running_mean\nresnetv116_stage1_batchnorm7_running_var\nParameter resnetv116_stage1_batchnorm7_running_var (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm7_running_var\nresnetv116_stage1_conv8_weight\nParameter resnetv116_stage1_conv8_weight (shape\u003d(64, 64, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv8_weight\nresnetv116_stage1_batchnorm8_gamma\nParameter resnetv116_stage1_batchnorm8_gamma (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm8_gamma\nresnetv116_stage1_batchnorm8_beta\nParameter resnetv116_stage1_batchnorm8_beta (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm8_beta\nresnetv116_stage1_batchnorm8_running_mean\nParameter resnetv116_stage1_batchnorm8_running_mean (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm8_running_mean\nresnetv116_stage1_batchnorm8_running_var\nParameter resnetv116_stage1_batchnorm8_running_var (shape\u003d(64,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm8_running_var\nresnetv116_stage1_conv9_weight\nParameter resnetv116_stage1_conv9_weight (shape\u003d(256, 64, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv9_weight\nresnetv116_stage1_conv9_bias\nParameter resnetv116_stage1_conv9_bias (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_conv9_bias\nresnetv116_stage1_batchnorm9_gamma\nParameter resnetv116_stage1_batchnorm9_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm9_gamma\nresnetv116_stage1_batchnorm9_beta\nParameter resnetv116_stage1_batchnorm9_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm9_beta\nresnetv116_stage1_batchnorm9_running_mean\nParameter resnetv116_stage1_batchnorm9_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm9_running_mean\nresnetv116_stage1_batchnorm9_running_var\nParameter resnetv116_stage1_batchnorm9_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage1_batchnorm9_running_var\nresnetv116_stage2_conv0_weight\nParameter resnetv116_stage2_conv0_weight (shape\u003d(128, 256, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv0_weight\nresnetv116_stage2_conv0_bias\nParameter resnetv116_stage2_conv0_bias (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv0_bias\nresnetv116_stage2_batchnorm0_gamma\nParameter resnetv116_stage2_batchnorm0_gamma (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm0_gamma\nresnetv116_stage2_batchnorm0_beta\nParameter resnetv116_stage2_batchnorm0_beta (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm0_beta\nresnetv116_stage2_batchnorm0_running_mean\nParameter resnetv116_stage2_batchnorm0_running_mean (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm0_running_mean\nresnetv116_stage2_batchnorm0_running_var\nParameter resnetv116_stage2_batchnorm0_running_var (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm0_running_var\nresnetv116_stage2_conv1_weight\nParameter resnetv116_stage2_conv1_weight (shape\u003d(128, 128, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv1_weight\nresnetv116_stage2_batchnorm1_gamma\nParameter resnetv116_stage2_batchnorm1_gamma (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm1_gamma\nresnetv116_stage2_batchnorm1_beta\nParameter resnetv116_stage2_batchnorm1_beta (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm1_beta\nresnetv116_stage2_batchnorm1_running_mean\nParameter resnetv116_stage2_batchnorm1_running_mean (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm1_running_mean\nresnetv116_stage2_batchnorm1_running_var\nParameter resnetv116_stage2_batchnorm1_running_var (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm1_running_var\nresnetv116_stage2_conv2_weight\nParameter resnetv116_stage2_conv2_weight (shape\u003d(512, 128, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv2_weight\nresnetv116_stage2_conv2_bias\nParameter resnetv116_stage2_conv2_bias (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv2_bias\nresnetv116_stage2_batchnorm2_gamma\nParameter resnetv116_stage2_batchnorm2_gamma (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm2_gamma\nresnetv116_stage2_batchnorm2_beta\nParameter resnetv116_stage2_batchnorm2_beta (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm2_beta\nresnetv116_stage2_batchnorm2_running_mean\nParameter resnetv116_stage2_batchnorm2_running_mean (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm2_running_mean\nresnetv116_stage2_batchnorm2_running_var\nParameter resnetv116_stage2_batchnorm2_running_var (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm2_running_var\nresnetv116_stage2_conv3_weight\nParameter resnetv116_stage2_conv3_weight (shape\u003d(512, 256, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv3_weight\nresnetv116_stage2_batchnorm3_gamma\nParameter resnetv116_stage2_batchnorm3_gamma (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm3_gamma\nresnetv116_stage2_batchnorm3_beta\nParameter resnetv116_stage2_batchnorm3_beta (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm3_beta\nresnetv116_stage2_batchnorm3_running_mean\nParameter resnetv116_stage2_batchnorm3_running_mean (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm3_running_mean\nresnetv116_stage2_batchnorm3_running_var\nParameter resnetv116_stage2_batchnorm3_running_var (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm3_running_var\nresnetv116_stage2_conv4_weight\nParameter resnetv116_stage2_conv4_weight (shape\u003d(128, 512, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv4_weight\nresnetv116_stage2_conv4_bias\nParameter resnetv116_stage2_conv4_bias (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv4_bias\nresnetv116_stage2_batchnorm4_gamma\nParameter resnetv116_stage2_batchnorm4_gamma (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm4_gamma\nresnetv116_stage2_batchnorm4_beta\nParameter resnetv116_stage2_batchnorm4_beta (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm4_beta\nresnetv116_stage2_batchnorm4_running_mean\nParameter resnetv116_stage2_batchnorm4_running_mean (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm4_running_mean\nresnetv116_stage2_batchnorm4_running_var\nParameter resnetv116_stage2_batchnorm4_running_var (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm4_running_var\nresnetv116_stage2_conv5_weight\nParameter resnetv116_stage2_conv5_weight (shape\u003d(128, 128, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv5_weight\nresnetv116_stage2_batchnorm5_gamma\nParameter resnetv116_stage2_batchnorm5_gamma (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm5_gamma\nresnetv116_stage2_batchnorm5_beta\nParameter resnetv116_stage2_batchnorm5_beta (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm5_beta\nresnetv116_stage2_batchnorm5_running_mean\nParameter resnetv116_stage2_batchnorm5_running_mean (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm5_running_mean\nresnetv116_stage2_batchnorm5_running_var\nParameter resnetv116_stage2_batchnorm5_running_var (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm5_running_var\nresnetv116_stage2_conv6_weight\nParameter resnetv116_stage2_conv6_weight (shape\u003d(512, 128, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv6_weight\nresnetv116_stage2_conv6_bias\nParameter resnetv116_stage2_conv6_bias (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv6_bias\nresnetv116_stage2_batchnorm6_gamma\nParameter resnetv116_stage2_batchnorm6_gamma (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm6_gamma\nresnetv116_stage2_batchnorm6_beta\nParameter resnetv116_stage2_batchnorm6_beta (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm6_beta\nresnetv116_stage2_batchnorm6_running_mean\nParameter resnetv116_stage2_batchnorm6_running_mean (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm6_running_mean\nresnetv116_stage2_batchnorm6_running_var\nParameter resnetv116_stage2_batchnorm6_running_var (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm6_running_var\nresnetv116_stage2_conv7_weight\nParameter resnetv116_stage2_conv7_weight (shape\u003d(128, 512, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv7_weight\nresnetv116_stage2_conv7_bias\nParameter resnetv116_stage2_conv7_bias (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv7_bias\nresnetv116_stage2_batchnorm7_gamma\nParameter resnetv116_stage2_batchnorm7_gamma (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm7_gamma\nresnetv116_stage2_batchnorm7_beta\nParameter resnetv116_stage2_batchnorm7_beta (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm7_beta\nresnetv116_stage2_batchnorm7_running_mean\nParameter resnetv116_stage2_batchnorm7_running_mean (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm7_running_mean\nresnetv116_stage2_batchnorm7_running_var\nParameter resnetv116_stage2_batchnorm7_running_var (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm7_running_var\nresnetv116_stage2_conv8_weight\nParameter resnetv116_stage2_conv8_weight (shape\u003d(128, 128, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv8_weight\nresnetv116_stage2_batchnorm8_gamma\nParameter resnetv116_stage2_batchnorm8_gamma (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm8_gamma\nresnetv116_stage2_batchnorm8_beta\nParameter resnetv116_stage2_batchnorm8_beta (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm8_beta\nresnetv116_stage2_batchnorm8_running_mean\nParameter resnetv116_stage2_batchnorm8_running_mean (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm8_running_mean\nresnetv116_stage2_batchnorm8_running_var\nParameter resnetv116_stage2_batchnorm8_running_var (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm8_running_var\nresnetv116_stage2_conv9_weight\nParameter resnetv116_stage2_conv9_weight (shape\u003d(512, 128, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv9_weight\nresnetv116_stage2_conv9_bias\nParameter resnetv116_stage2_conv9_bias (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv9_bias\nresnetv116_stage2_batchnorm9_gamma\nParameter resnetv116_stage2_batchnorm9_gamma (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm9_gamma\nresnetv116_stage2_batchnorm9_beta\nParameter resnetv116_stage2_batchnorm9_beta (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm9_beta\nresnetv116_stage2_batchnorm9_running_mean\nParameter resnetv116_stage2_batchnorm9_running_mean (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm9_running_mean\nresnetv116_stage2_batchnorm9_running_var\nParameter resnetv116_stage2_batchnorm9_running_var (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm9_running_var\nresnetv116_stage2_conv10_weight\nParameter resnetv116_stage2_conv10_weight (shape\u003d(128, 512, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv10_weight\nresnetv116_stage2_conv10_bias\nParameter resnetv116_stage2_conv10_bias (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv10_bias\nresnetv116_stage2_batchnorm10_gamma\nParameter resnetv116_stage2_batchnorm10_gamma (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm10_gamma\nresnetv116_stage2_batchnorm10_beta\nParameter resnetv116_stage2_batchnorm10_beta (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm10_beta\nresnetv116_stage2_batchnorm10_running_mean\nParameter resnetv116_stage2_batchnorm10_running_mean (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm10_running_mean\nresnetv116_stage2_batchnorm10_running_var\nParameter resnetv116_stage2_batchnorm10_running_var (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm10_running_var\nresnetv116_stage2_conv11_weight\nParameter resnetv116_stage2_conv11_weight (shape\u003d(128, 128, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv11_weight\nresnetv116_stage2_batchnorm11_gamma\nParameter resnetv116_stage2_batchnorm11_gamma (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm11_gamma\nresnetv116_stage2_batchnorm11_beta\nParameter resnetv116_stage2_batchnorm11_beta (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm11_beta\nresnetv116_stage2_batchnorm11_running_mean\nParameter resnetv116_stage2_batchnorm11_running_mean (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm11_running_mean\nresnetv116_stage2_batchnorm11_running_var\nParameter resnetv116_stage2_batchnorm11_running_var (shape\u003d(128,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm11_running_var\nresnetv116_stage2_conv12_weight\nParameter resnetv116_stage2_conv12_weight (shape\u003d(512, 128, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv12_weight\nresnetv116_stage2_conv12_bias\nParameter resnetv116_stage2_conv12_bias (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_conv12_bias\nresnetv116_stage2_batchnorm12_gamma\nParameter resnetv116_stage2_batchnorm12_gamma (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm12_gamma\nresnetv116_stage2_batchnorm12_beta\nParameter resnetv116_stage2_batchnorm12_beta (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm12_beta\nresnetv116_stage2_batchnorm12_running_mean\nParameter resnetv116_stage2_batchnorm12_running_mean (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm12_running_mean\nresnetv116_stage2_batchnorm12_running_var\nParameter resnetv116_stage2_batchnorm12_running_var (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage2_batchnorm12_running_var\nresnetv116_stage3_conv0_weight\nParameter resnetv116_stage3_conv0_weight (shape\u003d(256, 512, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv0_weight\nresnetv116_stage3_conv0_bias\nParameter resnetv116_stage3_conv0_bias (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv0_bias\nresnetv116_stage3_batchnorm0_gamma\nParameter resnetv116_stage3_batchnorm0_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm0_gamma\nresnetv116_stage3_batchnorm0_beta\nParameter resnetv116_stage3_batchnorm0_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm0_beta\nresnetv116_stage3_batchnorm0_running_mean\nParameter resnetv116_stage3_batchnorm0_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm0_running_mean\nresnetv116_stage3_batchnorm0_running_var\nParameter resnetv116_stage3_batchnorm0_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm0_running_var\nresnetv116_stage3_conv1_weight\nParameter resnetv116_stage3_conv1_weight (shape\u003d(256, 256, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv1_weight\nresnetv116_stage3_batchnorm1_gamma\nParameter resnetv116_stage3_batchnorm1_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm1_gamma\nresnetv116_stage3_batchnorm1_beta\nParameter resnetv116_stage3_batchnorm1_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm1_beta\nresnetv116_stage3_batchnorm1_running_mean\nParameter resnetv116_stage3_batchnorm1_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm1_running_mean\nresnetv116_stage3_batchnorm1_running_var\nParameter resnetv116_stage3_batchnorm1_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm1_running_var\nresnetv116_stage3_conv2_weight\nParameter resnetv116_stage3_conv2_weight (shape\u003d(1024, 256, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv2_weight\nresnetv116_stage3_conv2_bias\nParameter resnetv116_stage3_conv2_bias (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv2_bias\nresnetv116_stage3_batchnorm2_gamma\nParameter resnetv116_stage3_batchnorm2_gamma (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm2_gamma\nresnetv116_stage3_batchnorm2_beta\nParameter resnetv116_stage3_batchnorm2_beta (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm2_beta\nresnetv116_stage3_batchnorm2_running_mean\nParameter resnetv116_stage3_batchnorm2_running_mean (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm2_running_mean\nresnetv116_stage3_batchnorm2_running_var\nParameter resnetv116_stage3_batchnorm2_running_var (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm2_running_var\nresnetv116_stage3_conv3_weight\nParameter resnetv116_stage3_conv3_weight (shape\u003d(1024, 512, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv3_weight\nresnetv116_stage3_batchnorm3_gamma\nParameter resnetv116_stage3_batchnorm3_gamma (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm3_gamma\nresnetv116_stage3_batchnorm3_beta\nParameter resnetv116_stage3_batchnorm3_beta (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm3_beta\nresnetv116_stage3_batchnorm3_running_mean\nParameter resnetv116_stage3_batchnorm3_running_mean (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm3_running_mean\nresnetv116_stage3_batchnorm3_running_var\nParameter resnetv116_stage3_batchnorm3_running_var (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm3_running_var\nresnetv116_stage3_conv4_weight\nParameter resnetv116_stage3_conv4_weight (shape\u003d(256, 1024, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv4_weight\nresnetv116_stage3_conv4_bias\nParameter resnetv116_stage3_conv4_bias (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv4_bias\nresnetv116_stage3_batchnorm4_gamma\nParameter resnetv116_stage3_batchnorm4_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm4_gamma\nresnetv116_stage3_batchnorm4_beta\nParameter resnetv116_stage3_batchnorm4_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm4_beta\nresnetv116_stage3_batchnorm4_running_mean\nParameter resnetv116_stage3_batchnorm4_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm4_running_mean\nresnetv116_stage3_batchnorm4_running_var\nParameter resnetv116_stage3_batchnorm4_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm4_running_var\nresnetv116_stage3_conv5_weight\nParameter resnetv116_stage3_conv5_weight (shape\u003d(256, 256, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv5_weight\nresnetv116_stage3_batchnorm5_gamma\nParameter resnetv116_stage3_batchnorm5_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm5_gamma\nresnetv116_stage3_batchnorm5_beta\nParameter resnetv116_stage3_batchnorm5_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm5_beta\nresnetv116_stage3_batchnorm5_running_mean\nParameter resnetv116_stage3_batchnorm5_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm5_running_mean\nresnetv116_stage3_batchnorm5_running_var\nParameter resnetv116_stage3_batchnorm5_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm5_running_var\nresnetv116_stage3_conv6_weight\nParameter resnetv116_stage3_conv6_weight (shape\u003d(1024, 256, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv6_weight\nresnetv116_stage3_conv6_bias\nParameter resnetv116_stage3_conv6_bias (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv6_bias\nresnetv116_stage3_batchnorm6_gamma\nParameter resnetv116_stage3_batchnorm6_gamma (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm6_gamma\nresnetv116_stage3_batchnorm6_beta\nParameter resnetv116_stage3_batchnorm6_beta (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm6_beta\nresnetv116_stage3_batchnorm6_running_mean\nParameter resnetv116_stage3_batchnorm6_running_mean (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm6_running_mean\nresnetv116_stage3_batchnorm6_running_var\nParameter resnetv116_stage3_batchnorm6_running_var (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm6_running_var\nresnetv116_stage3_conv7_weight\nParameter resnetv116_stage3_conv7_weight (shape\u003d(256, 1024, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv7_weight\nresnetv116_stage3_conv7_bias\nParameter resnetv116_stage3_conv7_bias (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv7_bias\nresnetv116_stage3_batchnorm7_gamma\nParameter resnetv116_stage3_batchnorm7_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm7_gamma\nresnetv116_stage3_batchnorm7_beta\nParameter resnetv116_stage3_batchnorm7_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm7_beta\nresnetv116_stage3_batchnorm7_running_mean\nParameter resnetv116_stage3_batchnorm7_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm7_running_mean\nresnetv116_stage3_batchnorm7_running_var\nParameter resnetv116_stage3_batchnorm7_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm7_running_var\nresnetv116_stage3_conv8_weight\nParameter resnetv116_stage3_conv8_weight (shape\u003d(256, 256, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv8_weight\nresnetv116_stage3_batchnorm8_gamma\nParameter resnetv116_stage3_batchnorm8_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm8_gamma\nresnetv116_stage3_batchnorm8_beta\nParameter resnetv116_stage3_batchnorm8_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm8_beta\nresnetv116_stage3_batchnorm8_running_mean\nParameter resnetv116_stage3_batchnorm8_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm8_running_mean\nresnetv116_stage3_batchnorm8_running_var\nParameter resnetv116_stage3_batchnorm8_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm8_running_var\nresnetv116_stage3_conv9_weight\nParameter resnetv116_stage3_conv9_weight (shape\u003d(1024, 256, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv9_weight\nresnetv116_stage3_conv9_bias\nParameter resnetv116_stage3_conv9_bias (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv9_bias\nresnetv116_stage3_batchnorm9_gamma\nParameter resnetv116_stage3_batchnorm9_gamma (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm9_gamma\nresnetv116_stage3_batchnorm9_beta\nParameter resnetv116_stage3_batchnorm9_beta (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm9_beta\nresnetv116_stage3_batchnorm9_running_mean\nParameter resnetv116_stage3_batchnorm9_running_mean (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm9_running_mean\nresnetv116_stage3_batchnorm9_running_var\nParameter resnetv116_stage3_batchnorm9_running_var (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm9_running_var\nresnetv116_stage3_conv10_weight\nParameter resnetv116_stage3_conv10_weight (shape\u003d(256, 1024, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv10_weight\nresnetv116_stage3_conv10_bias\nParameter resnetv116_stage3_conv10_bias (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv10_bias\nresnetv116_stage3_batchnorm10_gamma\nParameter resnetv116_stage3_batchnorm10_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm10_gamma\nresnetv116_stage3_batchnorm10_beta\nParameter resnetv116_stage3_batchnorm10_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm10_beta\nresnetv116_stage3_batchnorm10_running_mean\nParameter resnetv116_stage3_batchnorm10_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm10_running_mean\nresnetv116_stage3_batchnorm10_running_var\nParameter resnetv116_stage3_batchnorm10_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm10_running_var\nresnetv116_stage3_conv11_weight\nParameter resnetv116_stage3_conv11_weight (shape\u003d(256, 256, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv11_weight\nresnetv116_stage3_batchnorm11_gamma\nParameter resnetv116_stage3_batchnorm11_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm11_gamma\nresnetv116_stage3_batchnorm11_beta\nParameter resnetv116_stage3_batchnorm11_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm11_beta\nresnetv116_stage3_batchnorm11_running_mean\nParameter resnetv116_stage3_batchnorm11_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm11_running_mean\nresnetv116_stage3_batchnorm11_running_var\nParameter resnetv116_stage3_batchnorm11_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm11_running_var\nresnetv116_stage3_conv12_weight\nParameter resnetv116_stage3_conv12_weight (shape\u003d(1024, 256, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv12_weight\nresnetv116_stage3_conv12_bias\nParameter resnetv116_stage3_conv12_bias (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv12_bias\nresnetv116_stage3_batchnorm12_gamma\nParameter resnetv116_stage3_batchnorm12_gamma (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm12_gamma\nresnetv116_stage3_batchnorm12_beta\nParameter resnetv116_stage3_batchnorm12_beta (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm12_beta\nresnetv116_stage3_batchnorm12_running_mean\nParameter resnetv116_stage3_batchnorm12_running_mean (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm12_running_mean\nresnetv116_stage3_batchnorm12_running_var\nParameter resnetv116_stage3_batchnorm12_running_var (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm12_running_var\nresnetv116_stage3_conv13_weight\nParameter resnetv116_stage3_conv13_weight (shape\u003d(256, 1024, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv13_weight\nresnetv116_stage3_conv13_bias\nParameter resnetv116_stage3_conv13_bias (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv13_bias\nresnetv116_stage3_batchnorm13_gamma\nParameter resnetv116_stage3_batchnorm13_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm13_gamma\nresnetv116_stage3_batchnorm13_beta\nParameter resnetv116_stage3_batchnorm13_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm13_beta\nresnetv116_stage3_batchnorm13_running_mean\nParameter resnetv116_stage3_batchnorm13_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm13_running_mean\nresnetv116_stage3_batchnorm13_running_var\nParameter resnetv116_stage3_batchnorm13_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm13_running_var\nresnetv116_stage3_conv14_weight\nParameter resnetv116_stage3_conv14_weight (shape\u003d(256, 256, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv14_weight\nresnetv116_stage3_batchnorm14_gamma\nParameter resnetv116_stage3_batchnorm14_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm14_gamma\nresnetv116_stage3_batchnorm14_beta\nParameter resnetv116_stage3_batchnorm14_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm14_beta\nresnetv116_stage3_batchnorm14_running_mean\nParameter resnetv116_stage3_batchnorm14_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm14_running_mean\nresnetv116_stage3_batchnorm14_running_var\nParameter resnetv116_stage3_batchnorm14_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm14_running_var\nresnetv116_stage3_conv15_weight\nParameter resnetv116_stage3_conv15_weight (shape\u003d(1024, 256, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv15_weight\nresnetv116_stage3_conv15_bias\nParameter resnetv116_stage3_conv15_bias (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv15_bias\nresnetv116_stage3_batchnorm15_gamma\nParameter resnetv116_stage3_batchnorm15_gamma (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm15_gamma\nresnetv116_stage3_batchnorm15_beta\nParameter resnetv116_stage3_batchnorm15_beta (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm15_beta\nresnetv116_stage3_batchnorm15_running_mean\nParameter resnetv116_stage3_batchnorm15_running_mean (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm15_running_mean\nresnetv116_stage3_batchnorm15_running_var\nParameter resnetv116_stage3_batchnorm15_running_var (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm15_running_var\nresnetv116_stage3_conv16_weight\nParameter resnetv116_stage3_conv16_weight (shape\u003d(256, 1024, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv16_weight\nresnetv116_stage3_conv16_bias\nParameter resnetv116_stage3_conv16_bias (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv16_bias\nresnetv116_stage3_batchnorm16_gamma\nParameter resnetv116_stage3_batchnorm16_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm16_gamma\nresnetv116_stage3_batchnorm16_beta\nParameter resnetv116_stage3_batchnorm16_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm16_beta\nresnetv116_stage3_batchnorm16_running_mean\nParameter resnetv116_stage3_batchnorm16_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm16_running_mean\nresnetv116_stage3_batchnorm16_running_var\nParameter resnetv116_stage3_batchnorm16_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm16_running_var\nresnetv116_stage3_conv17_weight\nParameter resnetv116_stage3_conv17_weight (shape\u003d(256, 256, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv17_weight\nresnetv116_stage3_batchnorm17_gamma\nParameter resnetv116_stage3_batchnorm17_gamma (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm17_gamma\nresnetv116_stage3_batchnorm17_beta\nParameter resnetv116_stage3_batchnorm17_beta (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm17_beta\nresnetv116_stage3_batchnorm17_running_mean\nParameter resnetv116_stage3_batchnorm17_running_mean (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm17_running_mean\nresnetv116_stage3_batchnorm17_running_var\nParameter resnetv116_stage3_batchnorm17_running_var (shape\u003d(256,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm17_running_var\nresnetv116_stage3_conv18_weight\nParameter resnetv116_stage3_conv18_weight (shape\u003d(1024, 256, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv18_weight\nresnetv116_stage3_conv18_bias\nParameter resnetv116_stage3_conv18_bias (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_conv18_bias\nresnetv116_stage3_batchnorm18_gamma\nParameter resnetv116_stage3_batchnorm18_gamma (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm18_gamma\nresnetv116_stage3_batchnorm18_beta\nParameter resnetv116_stage3_batchnorm18_beta (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm18_beta\nresnetv116_stage3_batchnorm18_running_mean\nParameter resnetv116_stage3_batchnorm18_running_mean (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm18_running_mean\nresnetv116_stage3_batchnorm18_running_var\nParameter resnetv116_stage3_batchnorm18_running_var (shape\u003d(1024,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage3_batchnorm18_running_var\nresnetv116_stage4_conv0_weight\nParameter resnetv116_stage4_conv0_weight (shape\u003d(512, 1024, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv0_weight\nresnetv116_stage4_conv0_bias\nParameter resnetv116_stage4_conv0_bias (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv0_bias\nresnetv116_stage4_batchnorm0_gamma\nParameter resnetv116_stage4_batchnorm0_gamma (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm0_gamma\nresnetv116_stage4_batchnorm0_beta\nParameter resnetv116_stage4_batchnorm0_beta (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm0_beta\nresnetv116_stage4_batchnorm0_running_mean\nParameter resnetv116_stage4_batchnorm0_running_mean (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm0_running_mean\nresnetv116_stage4_batchnorm0_running_var\nParameter resnetv116_stage4_batchnorm0_running_var (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm0_running_var\nresnetv116_stage4_conv1_weight\nParameter resnetv116_stage4_conv1_weight (shape\u003d(512, 512, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv1_weight\nresnetv116_stage4_batchnorm1_gamma\nParameter resnetv116_stage4_batchnorm1_gamma (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm1_gamma\nresnetv116_stage4_batchnorm1_beta\nParameter resnetv116_stage4_batchnorm1_beta (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm1_beta\nresnetv116_stage4_batchnorm1_running_mean\nParameter resnetv116_stage4_batchnorm1_running_mean (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm1_running_mean\nresnetv116_stage4_batchnorm1_running_var\nParameter resnetv116_stage4_batchnorm1_running_var (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm1_running_var\nresnetv116_stage4_conv2_weight\nParameter resnetv116_stage4_conv2_weight (shape\u003d(2048, 512, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv2_weight\nresnetv116_stage4_conv2_bias\nParameter resnetv116_stage4_conv2_bias (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv2_bias\nresnetv116_stage4_batchnorm2_gamma\nParameter resnetv116_stage4_batchnorm2_gamma (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm2_gamma\nresnetv116_stage4_batchnorm2_beta\nParameter resnetv116_stage4_batchnorm2_beta (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm2_beta\nresnetv116_stage4_batchnorm2_running_mean\nParameter resnetv116_stage4_batchnorm2_running_mean (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm2_running_mean\nresnetv116_stage4_batchnorm2_running_var\nParameter resnetv116_stage4_batchnorm2_running_var (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm2_running_var\nresnetv116_stage4_conv3_weight\nParameter resnetv116_stage4_conv3_weight (shape\u003d(2048, 1024, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv3_weight\nresnetv116_stage4_batchnorm3_gamma\nParameter resnetv116_stage4_batchnorm3_gamma (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm3_gamma\nresnetv116_stage4_batchnorm3_beta\nParameter resnetv116_stage4_batchnorm3_beta (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm3_beta\nresnetv116_stage4_batchnorm3_running_mean\nParameter resnetv116_stage4_batchnorm3_running_mean (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm3_running_mean\nresnetv116_stage4_batchnorm3_running_var\nParameter resnetv116_stage4_batchnorm3_running_var (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm3_running_var\nresnetv116_stage4_conv4_weight\nParameter resnetv116_stage4_conv4_weight (shape\u003d(512, 2048, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv4_weight\nresnetv116_stage4_conv4_bias\nParameter resnetv116_stage4_conv4_bias (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv4_bias\nresnetv116_stage4_batchnorm4_gamma\nParameter resnetv116_stage4_batchnorm4_gamma (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm4_gamma\nresnetv116_stage4_batchnorm4_beta\nParameter resnetv116_stage4_batchnorm4_beta (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm4_beta\nresnetv116_stage4_batchnorm4_running_mean\nParameter resnetv116_stage4_batchnorm4_running_mean (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm4_running_mean\nresnetv116_stage4_batchnorm4_running_var\nParameter resnetv116_stage4_batchnorm4_running_var (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm4_running_var\nresnetv116_stage4_conv5_weight\nParameter resnetv116_stage4_conv5_weight (shape\u003d(512, 512, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv5_weight\nresnetv116_stage4_batchnorm5_gamma\nParameter resnetv116_stage4_batchnorm5_gamma (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm5_gamma\nresnetv116_stage4_batchnorm5_beta\nParameter resnetv116_stage4_batchnorm5_beta (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm5_beta\nresnetv116_stage4_batchnorm5_running_mean\nParameter resnetv116_stage4_batchnorm5_running_mean (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm5_running_mean\nresnetv116_stage4_batchnorm5_running_var\nParameter resnetv116_stage4_batchnorm5_running_var (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm5_running_var\nresnetv116_stage4_conv6_weight\nParameter resnetv116_stage4_conv6_weight (shape\u003d(2048, 512, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv6_weight\nresnetv116_stage4_conv6_bias\nParameter resnetv116_stage4_conv6_bias (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv6_bias\nresnetv116_stage4_batchnorm6_gamma\nParameter resnetv116_stage4_batchnorm6_gamma (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm6_gamma\nresnetv116_stage4_batchnorm6_beta\nParameter resnetv116_stage4_batchnorm6_beta (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm6_beta\nresnetv116_stage4_batchnorm6_running_mean\nParameter resnetv116_stage4_batchnorm6_running_mean (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm6_running_mean\nresnetv116_stage4_batchnorm6_running_var\nParameter resnetv116_stage4_batchnorm6_running_var (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm6_running_var\nresnetv116_stage4_conv7_weight\nParameter resnetv116_stage4_conv7_weight (shape\u003d(512, 2048, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv7_weight\nresnetv116_stage4_conv7_bias\nParameter resnetv116_stage4_conv7_bias (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv7_bias\nresnetv116_stage4_batchnorm7_gamma\nParameter resnetv116_stage4_batchnorm7_gamma (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm7_gamma\nresnetv116_stage4_batchnorm7_beta\nParameter resnetv116_stage4_batchnorm7_beta (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm7_beta\nresnetv116_stage4_batchnorm7_running_mean\nParameter resnetv116_stage4_batchnorm7_running_mean (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm7_running_mean\nresnetv116_stage4_batchnorm7_running_var\nParameter resnetv116_stage4_batchnorm7_running_var (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm7_running_var\nresnetv116_stage4_conv8_weight\nParameter resnetv116_stage4_conv8_weight (shape\u003d(512, 512, 3, 3), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv8_weight\nresnetv116_stage4_batchnorm8_gamma\nParameter resnetv116_stage4_batchnorm8_gamma (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm8_gamma\nresnetv116_stage4_batchnorm8_beta\nParameter resnetv116_stage4_batchnorm8_beta (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm8_beta\nresnetv116_stage4_batchnorm8_running_mean\nParameter resnetv116_stage4_batchnorm8_running_mean (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm8_running_mean\nresnetv116_stage4_batchnorm8_running_var\nParameter resnetv116_stage4_batchnorm8_running_var (shape\u003d(512,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm8_running_var\nresnetv116_stage4_conv9_weight\nParameter resnetv116_stage4_conv9_weight (shape\u003d(2048, 512, 1, 1), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv9_weight\nresnetv116_stage4_conv9_bias\nParameter resnetv116_stage4_conv9_bias (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_conv9_bias\nresnetv116_stage4_batchnorm9_gamma\nParameter resnetv116_stage4_batchnorm9_gamma (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm9_gamma\nresnetv116_stage4_batchnorm9_beta\nParameter resnetv116_stage4_batchnorm9_beta (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm9_beta\nresnetv116_stage4_batchnorm9_running_mean\nParameter resnetv116_stage4_batchnorm9_running_mean (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm9_running_mean\nresnetv116_stage4_batchnorm9_running_var\nParameter resnetv116_stage4_batchnorm9_running_var (shape\u003d(2048,), dtype\u003d\u003cclass \u0027numpy.float32\u0027\u003e)\nresnetv117_\nresnetv117_resnetv116_stage4_batchnorm9_running_var\nresnetv117_dense0_weight\nParameter resnetv117_dense0_weight (shape\u003d(11, 2048), dtype\u003dfloat32)\nresnetv117_\nresnetv117_dense0_weight\nresnetv117_dense0_bias\nParameter resnetv117_dense0_bias (shape\u003d(11,), dtype\u003dfloat32)\nresnetv117_\nresnetv117_dense0_bias\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1566348070067_-1348135864",
      "id": "20190821-004110_1074918982",
      "dateCreated": "2019-08-21 00:41:10.067",
      "dateStarted": "2019-08-21 01:52:21.625",
      "dateFinished": "2019-08-21 01:52:27.641",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\ndef show_images(pred_str, images):\n    titles \u003d [pred_str, \u0027Grad-CAM\u0027, \u0027Guided Grad-CAM\u0027, \u0027Saliency Map\u0027]\n    num_images \u003d len(images)\n    fig\u003dplt.figure(figsize\u003d(15,15))\n    rows, cols \u003d 1, num_images\n    for i in range(num_images):\n        fig.add_subplot(rows, cols, i+1)\n        plt.xlabel(titles[i])\n        img \u003d images[i].astype(np.uint8)\n        plt.imshow(img, cmap\u003d\u0027gray\u0027 if i\u003d\u003dnum_images-1 else None)\n    plt.show()\n    \ndef get_class_name(cls_id):\n    print(cls_id)\n    classes \u003d {0: \u0027breaker_box\u0027, 1: \u0027furnace\u0027, 2: \u0027hot_water_tank\u0027, 3: \u0027oil_tank\u0027, 4: \u0027pillar\u0027, 5: \u0027smoke_detector\u0027, 6: \u0027stairs\u0027, 7: \u0027sump_pump\u0027, 8: \u0027wall\u0027, 9: \u0027washer\u0027, 10: \u0027water_softener\u0027}\n\n    return classes[cls_id]\n\ndef run_inference(net, data):\n    out \u003d net(data)\n    return out.argmax(axis\u003d1).asnumpy()[0].astype(int)    ",
      "user": "anonymous",
      "dateUpdated": "2019-08-21 01:54:12.231",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1566348438066_-1040672266",
      "id": "20190821-004718_2143842310",
      "dateCreated": "2019-08-21 00:47:18.066",
      "dateStarted": "2019-08-21 01:54:12.255",
      "dateFinished": "2019-08-21 01:54:12.272",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\nimport mxnet\nfrom mxnet.image import color_normalize\nfrom mxnet import image\n\neigval \u003d [55.46, 4.794, 1.148]\neigvec \u003d [[-0.5675, 0.7192, 0.4009],[-0.5808, -0.0045, -0.8140],[-0.5836, -0.6948, 0.4203]]\n\ntest_augs \u003d [\n    image.HorizontalFlipAug(0.5),\n    image.LightingAug(1, eigval, eigvec),\n    image.BrightnessJitterAug(.3),\n    image.HueJitterAug(.05),\n    image.ForceResizeAug((224, 224)),\n    image.CenterCropAug((224, 224))\n]\n\ndef transform(data, augs):\n    data \u003d data.astype(\u0027float32\u0027)\n\n    for aug in augs:\n        data \u003d aug(data)\n\n    data \u003d nd.transpose(data, (2,0,1))\n\n    return data\n\n\ndef visualize(net, img_path, conv_layer_name):\n    with open(img_path, \u0027rb\u0027) as f:\n        print(\"reading \" + img_path)\n        #orig_img \u003d mx.img.imread(img_path)\n        orig_img \u003d mxnet.image.imdecode(f.read())\n    \n        print(\"read\")\n        preprocessed_img \u003d preprocess(orig_img)\n    \n        print(\"processing\")\n        preprocessed_img \u003d preprocessed_img.expand_dims(axis\u003d0)\n    \n        print(\"predicting\")\n        pred_str \u003d get_class_name(run_inference(net, preprocessed_img))\n    \n        print(\"I think it\u0027s a \" + pred_str)\n    \n        #orig_img \u003d mx.image.imresize(orig_img, image_sz[0], image_sz[1]).asnumpy()\n        #print(orig_img)\n      \n        #data, _ \u003d transform(img, -1, test_augs)\n    \n        data \u003d transform(orig_img, test_augs)\n        \n        print(\"shape: \" + str(data.shape))\n        \n        data \u003d data.expand_dims(axis\u003d0)\n        data \u003d color_normalize(data/255,\n            mean \u003d nd.array([0.485, 0.456, 0.406]).reshape((1,3,1,1)),\n            std \u003d nd.array([0.229, 0.224, 0.225]).reshape((1,3,1,1)))\n        print(\"shape: \" + str(data.shape))\n        #out \u003d net(data.as_in_context(mxnet.cpu()))\n        \n        vizs \u003d []\n        try:\n            vizs \u003d gradcam_visualize(net, data, data, conv_layer_name)\n            print(\"vizs\")\n        except:\n            print(\"err\")\n    \n        return (pred_str, (orig_img, *vizs))\n\n#print(network.features)\nlast_conv_layer_name \u003d network.features[8]._name\nprint(last_conv_layer_name)\n\nshow_images(*visualize(network, \"/data/household/demo/before/frames-0001.jpg\", last_conv_layer_name))\n",
      "user": "anonymous",
      "dateUpdated": "2019-08-21 02:09:59.133",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "resnetv116_pool1\nreading /data/household/demo/before/frames-0001.jpg\nread\nprocessing\npredicting\n5\nI think it\u0027s a smoke_detector\nshape: (3, 224, 224)\nshape: (1, 3, 224, 224)\nerr\n"
          },
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-3808862334288108950.py\", line 312, in \u003cmodule\u003e\n    exec(code, _zcUserQueryNameSpace)\n  File \"\u003cstdin\u003e\", line 47, in \u003cmodule\u003e\n  File \"\u003cstdin\u003e\", line 44, in visualize\nTypeError: \u0027NoneType\u0027 object is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-3808862334288108950.py\", line 319, in \u003cmodule\u003e\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-3808862334288108950.py\", line 312, in \u003cmodule\u003e\n    exec(code, _zcUserQueryNameSpace)\n  File \"\u003cstdin\u003e\", line 47, in \u003cmodule\u003e\n  File \"\u003cstdin\u003e\", line 44, in visualize\nTypeError: \u0027NoneType\u0027 object is not iterable\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1566348503445_-973295008",
      "id": "20190821-004823_450919686",
      "dateCreated": "2019-08-21 00:48:23.445",
      "dateStarted": "2019-08-21 02:09:51.958",
      "dateFinished": "2019-08-21 02:09:52.750",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n",
      "user": "anonymous",
      "dateUpdated": "2019-08-21 01:58:39.772",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "reading /data/household/demo/before/frames-0001.jpg\n"
          },
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-3808862334288108950.py\", line 312, in \u003cmodule\u003e\n    exec(code, _zcUserQueryNameSpace)\n  File \"\u003cstdin\u003e\", line 1, in \u003cmodule\u003e\n  File \"\u003cstdin\u003e\", line 3, in visualize\nNameError: name \u0027mxnet\u0027 is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-3808862334288108950.py\", line 319, in \u003cmodule\u003e\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-3808862334288108950.py\", line 312, in \u003cmodule\u003e\n    exec(code, _zcUserQueryNameSpace)\n  File \"\u003cstdin\u003e\", line 1, in \u003cmodule\u003e\n  File \"\u003cstdin\u003e\", line 3, in visualize\nNameError: name \u0027mxnet\u0027 is not defined\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1566348532188_456451452",
      "id": "20190821-004852_793377418",
      "dateCreated": "2019-08-21 00:48:52.188",
      "dateStarted": "2019-08-21 01:58:35.722",
      "dateFinished": "2019-08-21 01:58:35.736",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n",
      "user": "anonymous",
      "dateUpdated": "2019-08-21 00:49:00.964",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1566348540963_1715727979",
      "id": "20190821-004900_1781404457",
      "dateCreated": "2019-08-21 00:49:00.964",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "visualizer",
  "id": "2EN1DU3UH",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "python:shared_process": [],
    "sh:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}